<div class="py-5">
  <div class="relative overflow-x-auto">
    <table
      class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
    >
      <thead
        class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
      >
        <tr>
          <th scope="col" class="px-6 py-3">No</th>
          <th scope="col" class="px-6 py-3">Product name</th>
          <th scope="col" class="px-6 py-3">quantity</th>
          <th scope="col" class="px-6 py-3">Price</th>
          <th scope="col" class="px-6 py-3">Subtotal</th>
          <th scope="col" class="px-6 py-3">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% if (cart && cart.items && cart.items.length > 0) { %> <%
        cart.items.map((item, index) => { %>
        <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
          <td
            class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white"
          >
            #<%= index + 1 %>
          </td>
          <td scope="row" class="px-6 py-4"><%= item.name %></td>
          <td class="px-6 py-4">
            <div class="flex items-center">
              <button
                class="decrease-quantity inline-flex items-center justify-center p-1 me-3 text-sm font-medium h-6 w-6 text-gray-500 bg-white border border-gray-300 rounded-full focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700"
                type="button"
              >
                <span class="sr-only">Quantity button</span>
                <svg
                  class="w-3 h-3"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 18 2"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M1 1h16"
                  />
                </svg>
              </button>
              <div>
                <input
                  type="number"
                  class="bg-gray-50 w-14 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block px-2.5 py-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="1"
                  value="<%= item.quantity %>"
                  id="quantity-input-<%= index %>"
                  required
                />
              </div>
              <button
                class="increase-quantity inline-flex items-center justify-center h-6 w-6 p-1 ms-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-full focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700"
                type="button"
              >
                <span class="sr-only">Quantity button</span>
                <svg
                  class="w-3 h-3"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 18 18"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 1v16M1 9h16"
                  />
                </svg>
              </button>
            </div>
          </td>
          <td class="px-6 py-4">$<%= item.price %></td>
          <td class="px-6 py-4">
            $<%= (Number(item.price) || 0) * (Number(item.quantity) || 0) %>
          </td>
          <td>
            <button
              type="button"
              data-product-id="<%= item.productId %>"
              class="save-quantity text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
            >
              Save
            </button>
            <button
              type="button"
              data-product-id="<%= item.productId %>"
              class="remove-product focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900"
            >
              Remove
            </button>
          </td>
        </tr>
        <% }); %> <% } else { %>
        <tr>
          <td colspan="6" class="p-4 text-center w-full">
            <div
              class="p-4 w-full mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
              role="alert"
            >
              <span class="font-medium">Danger alert!</span> No cart found.
            </div>
          </td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  <% if (cart && cart.items && cart.items.length > 0) { %>
  <div class="mt-8">
    <h3 class="text-2xl font-medium mb-5">Total: $ <%= cart?.totalPrice %></h3>
    <a
      href="/checkout"
      class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
      >Checkout</a
    >
  </div>
  <% } %>
</div>

<script>
  document.querySelectorAll(".decrease-quantity").forEach((button, index) => {
    button.addEventListener("click", () => {
      const quantityInput = document.querySelector(`#quantity-input-${index}`);
      let quantity = parseInt(quantityInput.value, 10) || 0;

      if (quantity > 1) {
        quantity -= 1; // Decrease quantity by 1, ensuring it doesn't go below 1
      }

      quantityInput.value = quantity;
    });
  });

  // Event listener for increase button
  document.querySelectorAll(".increase-quantity").forEach((button, index) => {
    button.addEventListener("click", () => {
      const quantityInput = document.querySelector(`#quantity-input-${index}`);
      let quantity = parseInt(quantityInput.value, 10) || 0;
      quantity += 1; // Increase quantity by 1
      quantityInput.value = quantity;
    });
  });

  // Function to handle quantity change
  document.querySelectorAll(".save-quantity").forEach((button, index) => {
    button.addEventListener("click", async () => {
      const quantityInput = document.querySelector(`#quantity-input-${index}`);
      const newQuantity = quantityInput.value;
      const productId = button.dataset.productId;

      if (newQuantity <= 0 || isNaN(newQuantity)) {
        alert("Quantity must be a positive number!!.");
        return;
      }

      try {
        const response = await fetch("/cart/edit_quantity", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            productId: productId,
            quantity: newQuantity,
          }),
        });

        const data = await response.json();
        console.log("data is :", data);
        if (response) {
          alert(data.message);
          location.reload(); // Reload to update the cart
        } else {
          alert("Failed to update quantity");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while updating the quantity");
      }
    });
  });

  // Function to handle product removal
  document.querySelectorAll(".remove-product").forEach((button, index) => {
    button.addEventListener("click", async () => {
      const productId = button.dataset.productId;

      try {
        const response = await fetch("/cart/", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            productId: productId,
          }),
        });

        const data = await response.json();
        console.log("data is :", data);
        if (response) {
          alert(data.message);
          location.reload(); // Reload to update the cart
        } else {
          alert("Failed to remove product");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while removing the product");
      }
    });
  });
</script>
